#BlueJ class context
comment0.target=DijkstraT
comment0.text=\r\n\ The\ {@code\ DijkstraT}\ class\ represents\ a\ data\ type\ for\ solving\ the\r\n\ single-source\ shortest\ paths\ problem\ in\ edge-weighted\ digraphs\r\n\ where\ the\ edge\ weights\ are\ nonnegative.\r\n\ <p>\r\n\ This\ implementation\ uses\ Dijkstra's\ algorithm\ with\ a\ binary\ heap.\r\n\ The\ constructor\ takes\ time\ proportional\ to\ <em>E</em>\ log\ <em>V</em>,\r\n\ where\ <em>V</em>\ is\ the\ number\ of\ vertices\ and\ <em>E</em>\ is\ the\ number\ of\r\n\ edges.\r\n\ Afterwards,\ the\ {@code\ distTo()}\ and\ {@code\ hasPathTo()}\ methods\ take\r\n\ constant\ time\ and\ the\ {@code\ pathTo()}\ method\ takes\ time\ proportional\ to\ the\r\n\ number\ of\ edges\ in\ the\ shortest\ path\ returned.\r\n\ <p>\r\n\ For\ additional\ documentation,\r\n\ see\ <a\ href\="https\://algs4.cs.princeton.edu/44sp">Section\ 4.4</a>\ of\r\n\ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ @author\ Robert\ Sedgewick\r\n\ @author\ Kevin\ Wayne\r\n
comment1.params=G\ s
comment1.target=DijkstraT(EdgeWeightedDigraph,\ int)
comment1.text=\r\n\ C\u00E1c\ l\u1EDBp\ ph\u1EE5\ thu\u1ED9c\r\n\ EdgeWeightedDigraph\:\ \u0110\u1EA1i\ di\u1EC7n\ cho\ \u0111\u1ED3\ th\u1ECB\ c\u00F3\ h\u01B0\u1EDBng\ v\u00E0\ c\u00F3\ tr\u1ECDng\ s\u1ED1.\r\n\ DirectedEdge\:\ \u0110\u1EA1i\ di\u1EC7n\ cho\ m\u1ED9t\ c\u1EA1nh\ c\u00F3\ h\u01B0\u1EDBng\ v\u00E0\ c\u00F3\ tr\u1ECDng\ s\u1ED1.\r\n\ IndexMinPQ\:\ H\u00E0ng\ \u0111\u1EE3i\ \u01B0u\ ti\u00EAn\ v\u1EDBi\ kh\u1EA3\ n\u0103ng\ c\u1EADp\ nh\u1EADt\ kh\u00F3a\ (key)\ m\u1ED9t\ c\u00E1ch\ hi\u1EC7u\r\n\ qu\u1EA3.\r\n\ Stack\:\ C\u1EA5u\ tr\u00FAc\ d\u1EEF\ li\u1EC7u\ ng\u0103n\ x\u1EBFp\ \u0111\u1EC3\ l\u01B0u\ tr\u1EEF\ \u0111\u01B0\u1EDDng\ \u0111i.\r\n\ \=>\ \u0110o\u1EA1n\ m\u00E3\ tr\u00EAn\ l\u00E0\ m\u1ED9t\ tri\u1EC3n\ khai\ c\u1EE7a\ thu\u1EADt\ to\u00E1n\ Dijkstra\ \u0111\u1EC3\ t\u00ECm\ \u0111\u01B0\u1EDDng\ \u0111i\r\n\ ng\u1EAFn\r\n\ nh\u1EA5t\ trong\ \u0111\u1ED3\ th\u1ECB\ c\u00F3\ tr\u1ECDng\ s\u1ED1\ kh\u00F4ng\ \u00E2m.\r\n
comment10.params=args
comment10.target=void\ main(java.lang.String[])
comment10.text=\r\n\ Unit\ tests\ the\ {@code\ DijkstraT}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=G
comment2.target=void\ reset(EdgeWeightedDigraph)
comment3.params=v\ s
comment3.target=void\ printPath(int,\ int)
comment4.params=G\ v\ s
comment4.target=void\ solve(EdgeWeightedDigraph,\ int,\ int)
comment5.params=e
comment5.target=void\ relax(DirectedEdge)
comment6.params=v
comment6.target=double\ distTo(int)
comment6.text=\r\n\ Returns\ the\ length\ of\ a\ shortest\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\r\n\ vertex\ {@code\ v}.\r\n\ \r\n\ @param\ v\ the\ destination\ vertex\r\n\ @return\ the\ length\ of\ a\ shortest\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\r\n\ \ \ \ \ \ \ \ \ vertex\ {@code\ v};\r\n\ \ \ \ \ \ \ \ \ {@code\ Double.POSITIVE_INFINITY}\ if\ no\ such\ path\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment7.params=v
comment7.target=boolean\ hasPathTo(int)
comment7.text=\r\n\ Returns\ true\ if\ there\ is\ a\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\ vertex\r\n\ {@code\ v}.\r\n\r\n\ @param\ v\ the\ destination\ vertex\r\n\ @return\ {@code\ true}\ if\ there\ is\ a\ path\ from\ the\ source\ vertex\r\n\ \ \ \ \ \ \ \ \ {@code\ s}\ to\ vertex\ {@code\ v};\ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment8.params=v
comment8.target=java.lang.Iterable\ pathTo(int)
comment8.text=\r\n\ Returns\ a\ shortest\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\ vertex\ {@code\ v}.\r\n\r\n\ @param\ v\ the\ destination\ vertex\r\n\ @return\ a\ shortest\ path\ from\ the\ source\ vertex\ {@code\ s}\ to\ vertex\ {@code\ v}\r\n\ \ \ \ \ \ \ \ \ as\ an\ iterable\ of\ edges,\ and\ {@code\ null}\ if\ no\ such\ path\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment9.params=v
comment9.target=void\ validateVertex(int)
numComments=11
